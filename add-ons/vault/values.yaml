# for details on all options
# https://github.com/hashicorp/vault-helm/blob/main/values.yaml

vault:
  global:
    tlsDisable: false

  injector:
    resources:
        requests:
          memory: 256Mi
          cpu: 250m
        limits:
          memory: 256Mi
          cpu: 250m
  
  server:
    # These Resource Limits are in line with node requirements in the
    # Vault Reference Architecture for a Small Cluster
    # resources:
    #   requests:
    #     memory: 8Gi
    #     cpu: 2000m
    #   limits:
    #     memory: 16Gi
    #     cpu: 2000m
  
    # For HA configuration and because we need to manually init the vault,
    # we need to define custom readiness/liveness Probe settings
    readinessProbe:
      enabled: true
      path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
    livenessProbe:
      enabled: true
      path: "/v1/sys/health?standbyok=true"
      initialDelaySeconds: 300 
  
    # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
    # used to include variables required for auto-unseal.
    # extraEnvironmentVars:
      VAULT_CACERT: /vault/userconfig/vault-server-tls/ca.crt
  
    # extraVolumes is a list of extra volumes to mount. These will be exposed
    # to Vault in the path `/vault/userconfig/<name>/`.
    extraVolumes:
      - type: secret
        name: vault-server-tls
  
    # This configures the Vault Statefulset to create a PVC for audit logs.
    # See https://www.vaultproject.io/docs/audit/index.html to know more
    # auditStorage:
      # enabled: true
    dataStorage:
      size: 1G
  
    standalone:
      enabled: false
  
    # Run Vault in "HA" mode.
    ha:
      enabled: true
      replicas: 3
      raft:
        enabled: true
        setNodeId: true
  
        config: |
          ui = true
          listener "tcp" {
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
            tls_key_file = "/vault/userconfig/vault-server-tls/tls.key"
            tls_client_ca_file = "/vault/userconfig/vault-server-tls/ca.crt"
          }
  
          seal "awskms" {
            region = "us-east-1"
            kms_key_id = "alias/eks/agrl-core-vault-unseal"
          }
  
          storage "raft" {
            path = "/vault/data"
              retry_join {
              leader_api_addr = "https://vault-0.vault-internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
            }
            retry_join {
              leader_api_addr = "https://vault-1.vault-internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
            }
            retry_join {
              leader_api_addr = "https://vault-2.vault-internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
            }
          }
  
          service_registration "kubernetes" {}
  
  # Vault UI
  ui:
    enabled: true
    serviceType: "ClusterIP"
    serviceNodePort: null
    externalPort: 8200
  